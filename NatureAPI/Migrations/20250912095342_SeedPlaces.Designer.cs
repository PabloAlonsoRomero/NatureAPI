// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatureAPI;

#nullable disable

namespace NatureAPI.Migrations
{
    [DbContext(typeof(NatureDbContext))]
    [Migration("20250912095342_SeedPlaces")]
    partial class SeedPlaces
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NatureAPI.Models.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accessible")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElevationMeters")
                        .HasColumnType("int");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessible = true,
                            Category = "Parque",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Parque con senderos y miradores",
                            ElevationMeters = 3900,
                            EntryFee = 50.0,
                            Latitude = 19.219999999999999,
                            Longitude = -98.656999999999996,
                            Name = "Parque Nacional Iztaccíhuatl",
                            OpeningHours = "08:00-18:00"
                        },
                        new
                        {
                            Id = 2,
                            Accessible = true,
                            Category = "Cascada",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cascada famosa en Nuevo León",
                            ElevationMeters = 50,
                            EntryFee = 0.0,
                            Latitude = 25.123000000000001,
                            Longitude = -99.123000000000005,
                            Name = "Cascada Cola de Caballo",
                            OpeningHours = "08:00-17:00"
                        },
                        new
                        {
                            Id = 3,
                            Accessible = true,
                            Category = "Mirador",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mirador icónico en Monterrey",
                            ElevationMeters = 1800,
                            EntryFee = 0.0,
                            Latitude = 25.675000000000001,
                            Longitude = -100.309,
                            Name = "Mirador del Cerro de la Silla",
                            OpeningHours = "06:00-20:00"
                        },
                        new
                        {
                            Id = 4,
                            Accessible = true,
                            Category = "Parque",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Parque natural con senderos",
                            ElevationMeters = 2000,
                            EntryFee = 20.0,
                            Latitude = 25.678000000000001,
                            Longitude = -100.23399999999999,
                            Name = "Parque Ecológico Chipinque",
                            OpeningHours = "07:00-19:00"
                        },
                        new
                        {
                            Id = 5,
                            Accessible = false,
                            Category = "Cascada",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cascada más alta de Chihuahua",
                            ElevationMeters = 1800,
                            EntryFee = 30.0,
                            Latitude = 27.082000000000001,
                            Longitude = -107.867,
                            Name = "Cascada de Basaseacic",
                            OpeningHours = "08:00-17:00"
                        },
                        new
                        {
                            Id = 6,
                            Accessible = true,
                            Category = "Mirador",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mirador panorámico en Zacatecas",
                            ElevationMeters = 2500,
                            EntryFee = 10.0,
                            Latitude = 22.771000000000001,
                            Longitude = -102.583,
                            Name = "Mirador La Bufa",
                            OpeningHours = "06:00-20:00"
                        },
                        new
                        {
                            Id = 7,
                            Accessible = true,
                            Category = "Parque",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Parque con diversas rutas de senderismo",
                            ElevationMeters = 2600,
                            EntryFee = 40.0,
                            Latitude = 25.41,
                            Longitude = -100.247,
                            Name = "Parque Nacional Cumbres de Monterrey",
                            OpeningHours = "07:00-18:00"
                        },
                        new
                        {
                            Id = 8,
                            Accessible = false,
                            Category = "Cascada",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cascada en el cañón de Chihuahua",
                            ElevationMeters = 1700,
                            EntryFee = 25.0,
                            Latitude = 27.036999999999999,
                            Longitude = -98.656999999999996,
                            Name = "Cascada de Piedra Volada",
                            OpeningHours = "08:00-17:00"
                        },
                        new
                        {
                            Id = 9,
                            Accessible = true,
                            Category = "Mirador",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mirador en Bernal, Queretáro",
                            ElevationMeters = 2100,
                            EntryFee = 15.0,
                            Latitude = 20.667000000000002,
                            Longitude = -100.123,
                            Name = "Mirador de la Peña",
                            OpeningHours = "06:00-19:00"
                        },
                        new
                        {
                            Id = 10,
                            Accessible = true,
                            Category = "Parque",
                            CreatedAt = new DateTime(2025, 9, 12, 3, 52, 0, 0, DateTimeKind.Unspecified),
                            Description = "Parque con montaña y lagunas",
                            ElevationMeters = 4600,
                            EntryFee = 50.0,
                            Latitude = 19.117999999999999,
                            Longitude = -99.766999999999996,
                            Name = "Parque Nacional Nevado de Toluca",
                            OpeningHours = "07:00-18:00"
                        });
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.PlaceAmenity", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PlaceAmenities");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Trails");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Photo", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.PlaceAmenity", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Amenity", "Amenity")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatureAPI.Models.Entities.Place", "Place")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Review", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Trail", b =>
                {
                    b.HasOne("NatureAPI.Models.Entities.Place", "Place")
                        .WithMany("Trails")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Amenity", b =>
                {
                    b.Navigation("PlaceAmenities");
                });

            modelBuilder.Entity("NatureAPI.Models.Entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("PlaceAmenities");

                    b.Navigation("Reviews");

                    b.Navigation("Trails");
                });
#pragma warning restore 612, 618
        }
    }
}
